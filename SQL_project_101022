SELECT *
FROM [dbo].cust_dimen

SELECT *
FROM [dbo].Market_Fact

SELECT *
FROM [dbo].Orders_Dimen

SELECT *
FROM [dbo].prod_dimen

SELECT *
FROM [dbo].Shipping_Dimen

----___________________________________________________

--	 Analyze the data by finding the answers to the questions below:
--	 1. Using the columns of “market_fact”, “cust_dimen”, “orders_dimen”, 
--	 “prod_dimen”, “shipping_dimen”, Create a new table, named as
--	 “combined_table”.


SELECT A.Sales, A.Discount, A.Order_Quantity, A.Product_Base_Margin, B.*, C.*, D.*,E.*
INTO "combined_table"
		FROM Market_Fact A
		FULL OUTER JOIN Orders_Dimen B ON B.Ord_ID = A.Ord_ID
		FULL OUTER JOIN Prod_Dimen C ON C.Prod_ID = A.Prod_ID
		FULL OUTER JOIN Cust_Dimen D ON D.Cust_ID = A.Cust_ID
		FULL OUTER JOIN Shipping_Dimen E ON E.Ship_ID = A.Ship_ID


SELECT*
FROM combined_table

--_______________________________________________________________________________________________________________

-- 2. Find the top 3 customers who have the maximum count of orders.

SELECT TOP 3 Cust_ID, Customer_Name, Count(Ord_ID) AS count_of_order
FROM combined_table
GROUP BY Cust_Id, Customer_Name
ORDER BY count_of_order DESC 

--______________________________________________________________________________________________________________

-- 3.  Create a new column at combined_table as DaysTakenForShipping that contains the date difference of Order_Date and Ship_Date.

ALTER TABLE combined_table ADD DaysTakenForShipping INT;

UPDATE combined_table
SET DaysTakenForShipping = DATEDIFF(Day,Order_Date,Ship_Date)

SELECT*
FROM combined_table

--_________________________________________________________________________________________________________________

-- 4. Find the customer whose order took the maximum time to get shipping.

SELECT DaysTakenForShipping
FROM combined_table

SELECT TOP 1 Cust_ID, Customer_Name, DaysTakenForShipping
FROM combined_table
ORDER BY DaysTakenForShipping DESC

--_________________________________________________________________________________________________________________

-- 5. Count the total number of unique customers in January and how many of them 
-- came back every month over the entire year in 2011 (Month, mm, m)

SELECT COUNT (Cust_ID)
FROM combined_table

SELECT Cust_ID
FROM combined_table
WHERE DATEPART (MONTH, Order_Date) = 1 
AND YEAR(Order_Date) = 2011

SELECT DISTINCT 
MONTH(Order_Date) AS MONTH,
COUNT(Cust_ID) AS count_of_customer
FROM combined_table
WHERE Cust_ID IN 
		(
		SELECT Cust_ID
		FROM combined_table
		WHERE DATEPART (MONTH, Order_Date) = 1 
		AND YEAR(Order_Date) = 2011
		)
AND YEAR (Order_Date) = 2011
GROUP BY MONTH (Order_Date)

--_____________________________________________________________________________________________________________

-- 6.  Write a query to return for each user the time elapsed between the first 
--     purchasing and the third purchasing, in ascending order by Customer ID


WITH T1 AS
(
	SELECT Cust_ID, Order_Date,
	MIN(Order_Date) OVER (PARTITION BY Cust_Id ORDER BY Order_Date, Cust_ID) AS first_order,
	DENSE_RANK () OVER (PARTITION BY Cust_Id ORDER BY Order_Date, Cust_ID) dens_rank
	FROM combined_table
)
SELECT DISTINCT Cust_ID, Order_Date, DATEDIFF(Day, first_order,Order_Date) AS passing_time
FROM T1
WHERE dens_rank = 3
ORDER BY Cust_ID


-- 7. Write a query that returns customers who purchased both product 11 and 
-- product 14, as well as the ratio of these products to the total number of 
-- products purchased by the customer.

WITH T1 AS

(
SELECT  Cust_ID, COUNT(Prod_ID) total_product_11_14,
        SUM(CASE WHEN Prod_ID = 'Prod_11' THEN 1 ELSE 0 END) AS Pr_11,
        SUM(CASE WHEN Prod_ID = 'Prod_14' THEN 1 ELSE 0 END) AS Pr_14
FROM combined_table
WHERE Cust_ID in (SELECT Cust_ID
                  FROM combined_table 
                  WHERE Prod_ID = 'Prod_11'
                  INTERSECT
                  SELECT Cust_ID
                  FROM combined_table 
                  WHERE Prod_ID = 'Prod_14')
GROUP BY Cust_ID
)
SELECT Cust_ID, ROUND((cast(Pr_11 as float) ) / cast(total_product_11_14 as float),2) Ratio_C_11,
ROUND((cast(Pr_14 as float)) / cast(total_product_11_14 as float),2) Ratio_C_14
FROM T1



--___________________________________________________________________________________________________________

-- SECOND PART

--Customer Segmentation
--Categorize customers based on their frequency of visits. The following steps 
--will guide you. If you want, you can track your own way.

-- 1. Create a “view” that keeps visit logs of customers on a monthly basis. (For 
--    each log, three field is kept: Cust_id, Year, Month)


CREATE VIEW visit_logs_customer
AS 
SELECT Cust_ID, YEAR(Order_Date) [Year], MONTH(Order_Date) [Month]
FROM combined_table

SELECT*
FROM visit_logs_customer
ORDER by Cust_ID, [Year]

--__________________________________________________________________________________________________________----

--2. Create a “view” that keeps the number of monthly visits by users. 
--   (Show separately all months from the beginning business)

CREATE VIEW montly_visit
AS 
SELECT Cust_ID, MONTH(Order_Date) Month_order, COUNT(Order_Date) cnt_order
FROM combined_table
GROUP BY Cust_ID, MONTH(Order_Date)


--__________________________________________________________________________________________________________________-

--3. For each visit of customers, 
--   create the next month of the visit as a separate column.

CREATE VIEW next_visit_monthly AS

SELECT Cust_ID, Year_order , Month_order,
LEAD(Month_order) OVER (partition by Cust_ID order by Year_order, Month_order) Next_Order,
DENSE_RANK() OVER(partition by Cust_ID ORDER BY Year_order, Month_order) dns_rnk
FROM montly_visit
;


--________________________________________________________________________________________________________________________


--4. Calculate the monthly time gap between two consecutive visits by each customer.

CREATE VIEW monthly_time_gaps AS
WITH T2  AS
(
SELECT distinct Cust_ID, Order_Date,
lead(Order_Date) over (partition by Cust_ID ORDER by Order_Date) next_order
FROM combined_table
)
SELECT*, DATEDIFF(MONTH, Order_Date, next_order) as monthly_times_gap
FROM T2

SELECT *
FROM monthly_time_gaps


--_________________________________________________________________________________________________________________________________


--5. Categorise customers using average time gaps. 
--   Choose the most fitted labeling model for you. 

select Cust_ID,
case when AVG(monthly_time_gaps) is Null then 'Churn' 
     when AVG(monthly_time_gaps) <= 3 then 'Regular' 
     ELSE 'Irregular' END Labeling
FROM montly_time_gaps 
GROUP BY Cust_ID

--_________________________________________________________________________________________________________________

THIRD PART

-- Find month-by-month customer retention ratei since the start of the business.
-- 1. Find the number of customers retained month-wise. (You can use time gaps)

SELECT DISTINCT YEAR(Order_Date) year, Month(Order_Date) month, 
COUNT(Cust_ID) OVER (partition by YEAR(Order_Date),MONTH(Order_Date)) retained_month_wise
FROM montly_time_gaps
WHERE monthly_time_gap = 1
ORDER by YEAR(Order_Date), Month(Order_Date)


--  2. Calculate the month-wise retention rate.
--  Month-Wise Retention Rate = 1.0 * Number of Customers Retained in The Current Month / Total Number of Customers in the Current Month

WITH CTE as 
(
SELECT top 50 YEAR(Order_Date) year, MONTH(Order_Date) month, Count(Cust_ID) as Total_Customer,
sum(case when monthly_time_gap = 1 then 1 END) Retained_Customer
FROM montly_time_gaps
GROUP BY YEAR(Order_Date), MONTH(Order_Date)
ORDER by YEAR(Order_Date), MONTH(Order_Date)
)
SELECT*, round(1.0 *(cast(RetainedCustomer as float) / cast(TotalCustomer as float)), 2) MonthWise_RetentionRate
FROM CTE 
WHERE RetainedCustomer IS NOT NULL
